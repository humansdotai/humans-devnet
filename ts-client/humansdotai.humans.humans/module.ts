// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgUpdateBalance } from "./types/humans/tx";
import { MsgTranfserPoolcoin } from "./types/humans/tx";
import { MsgObservationVote } from "./types/humans/tx";
import { MsgKeysignVote } from "./types/humans/tx";
import { MsgApproveTransaction } from "./types/humans/tx";
import { MsgRequestTransaction } from "./types/humans/tx";


export { MsgUpdateBalance, MsgTranfserPoolcoin, MsgObservationVote, MsgKeysignVote, MsgApproveTransaction, MsgRequestTransaction };

type sendMsgUpdateBalanceParams = {
  value: MsgUpdateBalance,
  fee?: StdFee,
  memo?: string
};

type sendMsgTranfserPoolcoinParams = {
  value: MsgTranfserPoolcoin,
  fee?: StdFee,
  memo?: string
};

type sendMsgObservationVoteParams = {
  value: MsgObservationVote,
  fee?: StdFee,
  memo?: string
};

type sendMsgKeysignVoteParams = {
  value: MsgKeysignVote,
  fee?: StdFee,
  memo?: string
};

type sendMsgApproveTransactionParams = {
  value: MsgApproveTransaction,
  fee?: StdFee,
  memo?: string
};

type sendMsgRequestTransactionParams = {
  value: MsgRequestTransaction,
  fee?: StdFee,
  memo?: string
};


type msgUpdateBalanceParams = {
  value: MsgUpdateBalance,
};

type msgTranfserPoolcoinParams = {
  value: MsgTranfserPoolcoin,
};

type msgObservationVoteParams = {
  value: MsgObservationVote,
};

type msgKeysignVoteParams = {
  value: MsgKeysignVote,
};

type msgApproveTransactionParams = {
  value: MsgApproveTransaction,
};

type msgRequestTransactionParams = {
  value: MsgRequestTransaction,
};


export const registry = new Registry(msgTypes);

const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgUpdateBalance({ value, fee, memo }: sendMsgUpdateBalanceParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateBalance: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUpdateBalance({ value: MsgUpdateBalance.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateBalance: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgTranfserPoolcoin({ value, fee, memo }: sendMsgTranfserPoolcoinParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgTranfserPoolcoin: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgTranfserPoolcoin({ value: MsgTranfserPoolcoin.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgTranfserPoolcoin: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgObservationVote({ value, fee, memo }: sendMsgObservationVoteParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgObservationVote: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgObservationVote({ value: MsgObservationVote.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgObservationVote: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgKeysignVote({ value, fee, memo }: sendMsgKeysignVoteParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgKeysignVote: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgKeysignVote({ value: MsgKeysignVote.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgKeysignVote: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgApproveTransaction({ value, fee, memo }: sendMsgApproveTransactionParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgApproveTransaction: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgApproveTransaction({ value: MsgApproveTransaction.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgApproveTransaction: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRequestTransaction({ value, fee, memo }: sendMsgRequestTransactionParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRequestTransaction: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgRequestTransaction({ value: MsgRequestTransaction.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRequestTransaction: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgUpdateBalance({ value }: msgUpdateBalanceParams): EncodeObject {
			try {
				return { typeUrl: "/humansdotai.humans.humans.MsgUpdateBalance", value: MsgUpdateBalance.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateBalance: Could not create message: ' + e.message)
			}
		},
		
		msgTranfserPoolcoin({ value }: msgTranfserPoolcoinParams): EncodeObject {
			try {
				return { typeUrl: "/humansdotai.humans.humans.MsgTranfserPoolcoin", value: MsgTranfserPoolcoin.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgTranfserPoolcoin: Could not create message: ' + e.message)
			}
		},
		
		msgObservationVote({ value }: msgObservationVoteParams): EncodeObject {
			try {
				return { typeUrl: "/humansdotai.humans.humans.MsgObservationVote", value: MsgObservationVote.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgObservationVote: Could not create message: ' + e.message)
			}
		},
		
		msgKeysignVote({ value }: msgKeysignVoteParams): EncodeObject {
			try {
				return { typeUrl: "/humansdotai.humans.humans.MsgKeysignVote", value: MsgKeysignVote.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgKeysignVote: Could not create message: ' + e.message)
			}
		},
		
		msgApproveTransaction({ value }: msgApproveTransactionParams): EncodeObject {
			try {
				return { typeUrl: "/humansdotai.humans.humans.MsgApproveTransaction", value: MsgApproveTransaction.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgApproveTransaction: Could not create message: ' + e.message)
			}
		},
		
		msgRequestTransaction({ value }: msgRequestTransactionParams): EncodeObject {
			try {
				return { typeUrl: "/humansdotai.humans.humans.MsgRequestTransaction", value: MsgRequestTransaction.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRequestTransaction: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseUrl: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	
	public registry: Array<[string, GeneratedType]>;

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });
		this.tx = txClient({ signer: client.signer, addr: client.env.rpcURL, prefix: client.env.prefix ?? "cosmos" });
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			HumansdotaiHumansHumans: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;