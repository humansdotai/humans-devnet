syntax = "proto3";
package vigorousdeveloper.pochuman.pochuman;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "pochuman/params.proto";
import "pochuman/fee_balance.proto";
import "pochuman/keysign_vote_data.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/VigorousDeveloper/poc-human/x/pochuman/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/VigorousDeveloper/poc-human/pochuman/params";
  }
  // Queries a FeeBalance by index.
	rpc FeeBalance(QueryGetFeeBalanceRequest) returns (QueryGetFeeBalanceResponse) {
		option (google.api.http).get = "/VigorousDeveloper/poc-human/pochuman/fee_balance/{index}";
	}

	// Queries a list of FeeBalance items.
	rpc FeeBalanceAll(QueryAllFeeBalanceRequest) returns (QueryAllFeeBalanceResponse) {
		option (google.api.http).get = "/VigorousDeveloper/poc-human/pochuman/fee_balance";
	}

// Queries a KeysignVoteData by index.
	rpc KeysignVoteData(QueryGetKeysignVoteDataRequest) returns (QueryGetKeysignVoteDataResponse) {
		option (google.api.http).get = "/VigorousDeveloper/poc-human/pochuman/keysign_vote_data/{index}";
	}

	// Queries a list of KeysignVoteData items.
	rpc KeysignVoteDataAll(QueryAllKeysignVoteDataRequest) returns (QueryAllKeysignVoteDataResponse) {
		option (google.api.http).get = "/VigorousDeveloper/poc-human/pochuman/keysign_vote_data";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetFeeBalanceRequest {
	  string index = 1;

}

message QueryGetFeeBalanceResponse {
	FeeBalance feeBalance = 1 [(gogoproto.nullable) = false];
}

message QueryAllFeeBalanceRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllFeeBalanceResponse {
	repeated FeeBalance feeBalance = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetKeysignVoteDataRequest {
	  string index = 1;

}

message QueryGetKeysignVoteDataResponse {
	KeysignVoteData keysignVoteData = 1 [(gogoproto.nullable) = false];
}

message QueryAllKeysignVoteDataRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllKeysignVoteDataResponse {
	repeated KeysignVoteData keysignVoteData = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
